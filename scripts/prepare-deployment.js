#!/usr/bin/env node

/**
 * Script de pr√©paration au d√©ploiement
 * Initialise la base de donn√©es et effectue les v√©rifications finales
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const PROJECT_ROOT = path.join(__dirname, '..');
const KONIPA_APP = path.join(PROJECT_ROOT, 'konipa-app-new');
const BACKEND_DIR = path.join(KONIPA_APP, 'backend');

class DeploymentPreparation {
  constructor() {
    this.errors = [];
    this.warnings = [];
    this.successes = [];
  }

  log(type, message) {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] ${type.toUpperCase()}: ${message}`;
    
    switch (type) {
      case 'error':
        this.errors.push(logMessage);
        console.error(`‚ùå ${message}`);
        break;
      case 'warning':
        this.warnings.push(logMessage);
        console.warn(`‚ö†Ô∏è  ${message}`);
        break;
      case 'success':
        this.successes.push(logMessage);
        console.log(`‚úÖ ${message}`);
        break;
      default:
        console.log(`‚ÑπÔ∏è  ${message}`);
    }
  }

  async installDependencies() {
    console.log('\nüì¶ Installation des d√©pendances...');
    
    try {
      // Installation des d√©pendances backend
      console.log('Installation des d√©pendances backend...');
      execSync('npm install', { cwd: BACKEND_DIR, stdio: 'inherit' });
      this.log('success', 'D√©pendances backend install√©es');
      
      // Installation des d√©pendances frontend
      console.log('Installation des d√©pendances frontend...');
      execSync('npm install', { cwd: KONIPA_APP, stdio: 'inherit' });
      this.log('success', 'D√©pendances frontend install√©es');
      
    } catch (error) {
      this.log('error', `Erreur lors de l'installation des d√©pendances: ${error.message}`);
      return false;
    }
    
    return true;
  }

  async initializeDatabase() {
    console.log('\nüóÑÔ∏è Initialisation de la base de donn√©es...');
    
    try {
      // V√©rifier si la base de donn√©es existe
      const dbPath = path.join(BACKEND_DIR, 'database.sqlite');
      
      if (fs.existsSync(dbPath)) {
        this.log('success', 'Base de donn√©es existante trouv√©e');
      } else {
        this.log('warning', 'Base de donn√©es non trouv√©e, cr√©ation en cours...');
        
        // Cr√©er un fichier de base de donn√©es vide
        fs.writeFileSync(dbPath, '');
        this.log('success', 'Fichier de base de donn√©es cr√©√©');
      }
      
      // Ex√©cuter les migrations si n√©cessaire
      try {
        console.log('Ex√©cution des migrations...');
        execSync('npm run migrate', { cwd: BACKEND_DIR, stdio: 'inherit' });
        this.log('success', 'Migrations ex√©cut√©es avec succ√®s');
      } catch (migrateError) {
        this.log('warning', 'Migrations non disponibles ou d√©j√† appliqu√©es');
      }
      
    } catch (error) {
      this.log('error', `Erreur lors de l'initialisation de la base de donn√©es: ${error.message}`);
      return false;
    }
    
    return true;
  }

  async buildApplication() {
    console.log('\nüèóÔ∏è Construction de l\'application...');
    
    try {
      console.log('Construction du frontend...');
      execSync('npm run build', { cwd: KONIPA_APP, stdio: 'inherit' });
      this.log('success', 'Application frontend construite');
      
    } catch (error) {
      this.log('error', `Erreur lors de la construction: ${error.message}`);
      return false;
    }
    
    return true;
  }

  async runTests() {
    console.log('\nüß™ Ex√©cution des tests...');
    
    try {
      // D√©marrer le serveur minimal pour les tests
      console.log('D√©marrage du serveur de test...');
      const serverProcess = require('child_process').spawn('node', ['minimal-server.js'], {
        cwd: BACKEND_DIR,
        detached: true,
        stdio: 'pipe'
      });
      
      // Attendre que le serveur d√©marre
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      try {
        // Ex√©cuter les tests
        execSync('node test-complete-system.js', { cwd: BACKEND_DIR, stdio: 'inherit' });
        this.log('success', 'Tests syst√®me ex√©cut√©s');
      } catch (testError) {
        this.log('warning', 'Certains tests ont √©chou√©, v√©rifiez les d√©tails');
      }
      
      // Arr√™ter le serveur de test
      serverProcess.kill('SIGTERM');
      
    } catch (error) {
      this.log('error', `Erreur lors des tests: ${error.message}`);
      return false;
    }
    
    return true;
  }

  async checkIntegrity() {
    console.log('\nüîç V√©rification de l\'int√©grit√©...');
    
    try {
      execSync('node scripts/check-application-integrity.js', { cwd: PROJECT_ROOT, stdio: 'inherit' });
      this.log('success', 'V√©rification d\'int√©grit√© r√©ussie');
    } catch (error) {
      this.log('warning', 'V√©rification d\'int√©grit√© avec avertissements');
    }
    
    return true;
  }

  generateDeploymentReport() {
    console.log('\nüìä G√©n√©ration du rapport de d√©ploiement...');
    
    const report = {
      timestamp: new Date().toISOString(),
      status: this.errors.length === 0 ? 'READY' : 'NEEDS_ATTENTION',
      summary: {
        successes: this.successes.length,
        warnings: this.warnings.length,
        errors: this.errors.length
      },
      details: {
        successes: this.successes,
        warnings: this.warnings,
        errors: this.errors
      },
      nextSteps: this.errors.length === 0 ? [
        'L\'application est pr√™te pour le d√©ploiement',
        'D√©marrer le backend: cd backend && npm start',
        'D√©marrer le frontend: npm run preview',
        'Acc√©der √† l\'application: http://localhost:4173'
      ] : [
        'Corriger les erreurs list√©es ci-dessus',
        'Relancer le script de pr√©paration',
        'V√©rifier la documentation de d√©ploiement'
      ]
    };
    
    const reportPath = path.join(PROJECT_ROOT, 'deployment-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä RAPPORT DE PR√âPARATION AU D√âPLOIEMENT');
    console.log('='.repeat(60));
    console.log(`‚úÖ Succ√®s: ${this.successes.length}`);
    console.log(`‚ö†Ô∏è  Avertissements: ${this.warnings.length}`);
    console.log(`‚ùå Erreurs: ${this.errors.length}`);
    console.log(`üìÑ Rapport sauvegard√©: ${reportPath}`);
    
    if (this.errors.length === 0) {
      console.log('\nüéâ APPLICATION PR√äTE POUR LE D√âPLOIEMENT!');
      console.log('\nüìã PROCHAINES √âTAPES:');
      report.nextSteps.forEach(step => console.log(`   ‚Ä¢ ${step}`));
    } else {
      console.log('\n‚ö†Ô∏è  ATTENTION REQUISE AVANT LE D√âPLOIEMENT');
      console.log('\n‚ùå ERREURS √Ä CORRIGER:');
      this.errors.forEach(error => console.log(`   ${error}`));
    }
    
    return report;
  }

  async run() {
    console.log('üöÄ PR√âPARATION AU D√âPLOIEMENT DE L\'APPLICATION KONIPA');
    console.log('='.repeat(60));
    
    const steps = [
      { name: 'Installation des d√©pendances', method: this.installDependencies },
      { name: 'Initialisation de la base de donn√©es', method: this.initializeDatabase },
      { name: 'Construction de l\'application', method: this.buildApplication },
      { name: 'Ex√©cution des tests', method: this.runTests },
      { name: 'V√©rification de l\'int√©grit√©', method: this.checkIntegrity }
    ];
    
    for (const step of steps) {
      console.log(`\nüîÑ ${step.name}...`);
      const success = await step.method.call(this);
      if (!success && step.name.includes('d√©pendances')) {
        this.log('error', '√âtape critique √©chou√©e, arr√™t du processus');
        break;
      }
    }
    
    const report = this.generateDeploymentReport();
    
    // Code de sortie bas√© sur les erreurs
    process.exit(this.errors.length === 0 ? 0 : 1);
  }
}

// Ex√©cution du script
if (require.main === module) {
  const preparation = new DeploymentPreparation();
  preparation.run().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = DeploymentPreparation;